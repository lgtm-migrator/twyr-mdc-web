<aside
	class='mdc-snackbar'
	{{! Add styling classes as necessary }}
	{{has-class-if this.open 'mdc-snackbar--open'}}
	{{has-class-if this.stacked 'mdc-snackbar--stacked'}}
	{{! Re-calculate colours as necessary }}
	{{on-args-change this.recalcStyles @palette}}
	{{! Ensure id is present - we need it for the events }}
	{{requires-id ignore=true}}
	{{! Monitor changes to disabled status }}
	{{on-mutation this.onAttributeMutation attributeFilter=(array 'disabled')}}
	{{! Store reference to the element for DOM manipulation }}
	{{store-element this.storeElement}}
	{{! HTML attributes added in the calling template }}
	...attributes
>
	<div class='mdc-snackbar__surface' role='status' aria-relevant='additions'>
		<div class='mdc-snackbar__label' aria-atomic='false'>
			{{this.text}}
		</div>
		{{#if (or this.actionLabel this.closeable)}}
			<div class='mdc-snackbar__actions' aria-atomic='true'>
				{{#if this.actionLabel}}
					<button
						type='button'
						class='mdc-button mdc-snackbar__action'
						{{! React to clicks }}
						{{on 'click' (fn this.fireActionEvent 'action')}}
						{{! Store reference to the element for DOM manipulation }}
						{{store-element this.storeActionElement}}
					>
						<div class='mdc-button__ripple'></div>
						<span
							class='mdc-button__label'
						>{{this.actionLabel}}</span>
					</button>
				{{/if}}

				{{#if this.closeable}}
					<MdcIconButton
						class='mdc-snackbar__dismiss'
						@icon='close'
						@title='Dismiss'
						{{! React to clicks }}
						{{on 'click' (fn this.fireActionEvent 'close')}}
					/>
				{{/if}}
			</div>
		{{/if}}
	</div>
</aside>